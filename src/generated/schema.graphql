### This file was autogenerated by Nexus 0.9.13
### Do not make changes to this file directly


type Address {
  AddressLine1: String
  AddressLine2: String
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type AddressConnection {
  aggregate: AggregateAddress!
  edges: [AddressEdge!]!
  pageInfo: PageInfo!
}

input AddressCreateInput {
  AddressLine1: String
  AddressLine2: String
}

type AddressEdge {
  cursor: String!
  node: Address!
}

enum AddressOrderByInput {
  AddressLine1_ASC
  AddressLine1_DESC
  AddressLine2_ASC
  AddressLine2_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AddressUpdateInput {
  AddressLine1: String
  AddressLine2: String
}

input AddressUpdateManyMutationInput {
  AddressLine1: String
  AddressLine2: String
}

input AddressWhereInput {
  AddressLine1: String
  AddressLine1_contains: String
  AddressLine1_ends_with: String
  AddressLine1_gt: String
  AddressLine1_gte: String
  AddressLine1_in: [String!]
  AddressLine1_lt: String
  AddressLine1_lte: String
  AddressLine1_not: String
  AddressLine1_not_contains: String
  AddressLine1_not_ends_with: String
  AddressLine1_not_in: [String!]
  AddressLine1_not_starts_with: String
  AddressLine1_starts_with: String
  AddressLine2: String
  AddressLine2_contains: String
  AddressLine2_ends_with: String
  AddressLine2_gt: String
  AddressLine2_gte: String
  AddressLine2_in: [String!]
  AddressLine2_lt: String
  AddressLine2_lte: String
  AddressLine2_not: String
  AddressLine2_not_contains: String
  AddressLine2_not_ends_with: String
  AddressLine2_not_in: [String!]
  AddressLine2_not_starts_with: String
  AddressLine2_starts_with: String
  AND: [AddressWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createProfile(data: ProfileCreateInput!): Profile!
  createUser(data: UserCreateInput!): User!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteUser(where: UserWhereUniqueInput!): User
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Profile {
  createdAt: DateTime!
  firstname: String
  id: ID!
  lastname: String
  updatedAt: DateTime!
}

type ProfileConnection {
  aggregate: AggregateProfile!
  edges: [ProfileEdge!]!
  pageInfo: PageInfo!
}

input ProfileCreateInput {
  firstname: String
  lastname: String
}

type ProfileEdge {
  cursor: String!
  node: Profile!
}

enum ProfileOrderByInput {
  createdAt_ASC
  createdAt_DESC
  firstname_ASC
  firstname_DESC
  id_ASC
  id_DESC
  lastname_ASC
  lastname_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProfileUpdateInput {
  firstname: String
  lastname: String
}

input ProfileUpdateManyMutationInput {
  firstname: String
  lastname: String
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  firstname: String
  firstname_contains: String
  firstname_ends_with: String
  firstname_gt: String
  firstname_gte: String
  firstname_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_not: String
  firstname_not_contains: String
  firstname_not_ends_with: String
  firstname_not_in: [String!]
  firstname_not_starts_with: String
  firstname_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastname: String
  lastname_contains: String
  lastname_ends_with: String
  lastname_gt: String
  lastname_gte: String
  lastname_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_not: String
  lastname_not_contains: String
  lastname_not_ends_with: String
  lastname_not_in: [String!]
  lastname_not_starts_with: String
  lastname_starts_with: String
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(after: String, before: String, first: Int, last: Int, orderBy: AddressOrderByInput, skip: Int, where: AddressWhereInput): [Address!]!
  addressesConnection(after: String, before: String, first: Int, last: Int, orderBy: AddressOrderByInput, skip: Int, where: AddressWhereInput): AddressConnection!
  helloWorld: String!
  node(id: ID!): Node
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(after: String, before: String, first: Int, last: Int, orderBy: ProfileOrderByInput, skip: Int, where: ProfileWhereInput): [Profile!]!
  profilesConnection(after: String, before: String, first: Int, last: Int, orderBy: ProfileOrderByInput, skip: Int, where: ProfileWhereInput): ProfileConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

enum Role {
  ADMIN
  USER
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  updatedAt: DateTime!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  name: String
  password: String!
  role: Role
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  role: Role
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  role: Role
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
